package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"regexp"
	"strings"
	"time"
)

var debug = false
var companyName string

func main() {

	fmt.Printf("请输入公司名称，如公司名称存在多个单词请用单引号包住公司名称: ")
	fmt.Scanln(&companyName)
	//companyName := "Super voyage inc"
	postForm2(companyName)

	i := 0
	for {
		i++
	}
}

// 以Do的方式发送body为键值对的post请求
func postForm2(companyName string) {
	data := urlValues(companyName)
	bodyData := strings.NewReader(data.Encode())

	urlStr := "https://wyobiz.wyo.gov/Business/FilingSearch.aspx"

	client := &http.Client{
		Timeout: time.Second * 5,
	}
	r, _ := http.NewRequest("POST", urlStr, bodyData)
	r.Header.Set("Accept", "*/*")
	r.Header.Set("Cache-Control", "no-cache")
	r.Header.Set("Connection", "keep-alive")
	r.Header.Set("Accept-Language", "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7")

	r.Header.Set("Accept-Encoding", "gzip, deflate, br")
	r.Header.Set("Host", "wyobiz.wyo.gov")
	r.Header.Set("Origin", "https://wyobiz.wyo.gov")
	r.Header.Set("Referer", "https://wyobiz.wyo.gov/Business/FilingSearch.aspx")
	r.Header.Set("Sec-Ch-Ua", "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"")
	r.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	r.Header.Set("Sec-Ch-Ua-Platform", "Windows")
	r.Header.Set("Sec-Fetch-Dest", "empty")
	r.Header.Set("Sec-Fetch-Mode", "cors")
	r.Header.Set("Sec-Fetch-Site", "same-origin")
	r.Header.Set("X-Microsoftajax", "Delta=true")
	r.Header.Set("X-Requested-With", "XMLHttpRequest")

	//r.Header.Set("Cookie", "ASP.NET_SessionId=xjoo4zdphjbecpixzbmn3duy; SL_G_WPT_TO=zh; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; _gid=GA1.2.978345935.1686036411; TS01ab71c3=01cd08ec7235b501a5750173de8edef576aab94ed19dbff2d9bfa541b1001a4ec6680a67b10612c50e2f6fe32129a4da3a2ca31e300a8c994b2e9ff0e81f69c1ee96f09fc9; _ga=GA1.2.833117455.1686036411; TS00000000076=08c21012b1ab280046dd8ee7371489f3ab14e9ec0054d6ad4142d7306a25f8246ccef7648ba89a22ed929a9c17f4673e089471d82009d000f1740690de77f101e9330d6507c046032eb19acb4c8b94fadd1c42696eae3fb32914989ac3c881bfa7809e6d4f01ab89fe399dab49668ac891fdad9e51952dd54f8f6645736e88feb519f9433fda00865f738974670dd2bb7922e660ef6c304153b2969f85ea3250af820fde33cff1cee359db071fa129307d6683a09f92c72eb65788ac9da79bbc9c6e43656756b540c25458053cc156c010d6d6aeceefe80cf04146156743b8db8d005b54c8dd8aba053a283a37a67a1a78b1e95f5254e2fcd13133bbd8e22e614286255c22c0895f; TSPD_101_DID=08c21012b1ab280046dd8ee7371489f3ab14e9ec0054d6ad4142d7306a25f8246ccef7648ba89a22ed929a9c17f4673e089471d82006380023fdaf18d816eb8a95a6c5771241adbc399f2c1eb6f9f4eb457cafea6a06284a10028b8330572682cca4cb54dbca9b5ff8b7fdec0d933b02; TSPD_101=08c21012b1ab28006cd9aa2b489fd6aa8589071f78b0995551bb4086531303043293e4007013ffd96e8f19227b6977e9081a651a1d051800d4114e0368843bdb8bb31aa2019cbdf5b5ca7deb295910a5; TS00000000027=08c21012b1ab20000e52df32b1cd942ca1c635ea3693bd66e05101def7824dc1ad2e1a5de1ab93fc084aab1cb11130007c424eb1e9805850f20482d091a01bf46449d3de418f390edcf53ce34a56d8847ecd18d296eca6c2fd171e0980808bfb; _ga_LBGWKKMSSQ=GS1.1.1686035710.2.1.1686038106.0.0.0; TS758a99fc077=08c21012b1ab280071f6107d5eca31228b54e5e5e688ce408ba97c66a317d774e7a9db347e4ebc27b6181728c2c0ab6208388d00da172000c6c491520773b994f0abb3c73f7e1afeffba4b379d5ba6302cd93cf1965536f4; TS758a99fc073=08c21012b1ab280071f6107d5eca31228b54e5e5e688ce408ba97c66a317d774e7a9db347e4ebc27b6181728c2c0ab6208388d00da0218007f6806c05bedbddb4794dd375b5bd2333c9b3fc26410b8f3:08388d00da0c180082a3ab246421be3984de99f05221dab59c469dba8a7992db; TS758a99fc075=0602e10008c21012b1ab280071f6107d5eca31228b54e5e5e688ce408ba97c66a317d774e7a9db347e4ebc27b6181728c2c0ab6208388d00da0218007f6806c05bedbddb4794dd375b5bd2333c9b3fc26410b8f3:08388d00da0c180082a3ab246421be3984de99f05221dab59c469dba8a7992db00000001000f00008c21012b1ab2000e9a92523777cd340cc38ef8ec1cd108bbda75925449a3227702e323965f7771a08d87c8f5a0a4800205ce89059b1d7774794dd375b5bd233dc8ac57d6147fe2f50fa84c8f8fd2aa9e09c69d85f52593f28f8a3186f0006f70184c895daa7e1a01509cc7842a0d82ea6f4c35b582454037700https%3a%2f%2fwyobiz.wyo.gov%2fBusiness%2fFilingDetails.aspx%3feFNum%3d057185062162199035014128142158253199036041095048")

	r.Header.Set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
	r.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36")
	res, reqError := client.Do(r)

	if debug {
		fmt.Println("http body:", bodyData)
		reqInfo, err := httputil.DumpRequest(r, true)
		if err == nil {
			fmt.Println("http request:", string(reqInfo))
		} else {
			fmt.Println("http request dump failed, err:", err)
		}
	}

	if reqError != nil {
		if debug {
			fmt.Println("err：  ", reqError.Error())
		} else {
			fmt.Println("请求失败1")
		}
		return
	}

	//if debug{
	//	resInfo, err := httputil.DumpResponse(res, true)
	//	if err == nil {
	//		fmt.Println("http response:", string(resInfo))
	//	} else {
	//		fmt.Println("http response dump failed, err:", err)
	//	}
	//}

	defer func() {
		_ = res.Body.Close()
	}()

	//读取body
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		if debug {
			fmt.Println(" post err=", err)
		} else {
			fmt.Println("请求失败2")
		}
	}

	//saveLog("response.html", string(body))

	str := string(body)

	regData(str)
}

func urlValues(companyName string) url.Values {
	data2 := url.Values{}
	data2.Set("ctl00$MainContent$myScriptManager", "ctl00$MainContent$UpdatePanel1|ctl00$MainContent$cmdSearch")
	data2.Set("__LASTFOCUS", "")
	data2.Set("__EVENTTARGET", "")
	data2.Set("__EVENTARGUMENT", "")

	data2.Set("__VIEWSTATEGENERATOR", "9E6EC73D")
	data2.Set("__EVENTVALIDATION", "BGFPLEH0iMnNOuQrLlhdUno25/r/5cwryGIPtsnWVQ6uXLr2GYRoBQtN/LykLY5jMsAxvWWtHZEqfVNHzzUZNA2LlprR978RDh6OINpex23fg69QatmNkkDkCV9H5u+3dGj1SnB8DCj3CKza4blTYCGrp97s9OCwEQqVrwkxz1n9Ax5N4VuXzO1YyuXxfNFgyaG3Rm4tcc96CtPNwC3ikGdcRPrxd1TeG9qA9oUovgwJIVjn")
	data2.Set("ctl00$MainContent$txtFilingName", companyName)
	data2.Set("ctl00$MainContent$searchOpt", "chkSearchStartWith")
	data2.Set("ctl00$MainContent$txtFilingID", "")
	data2.Set("__ASYNCPOST", "true")
	data2.Set("ctl00$MainContent$cmdSearch", "Search")
	data2.Set("__VIEWSTATE", "")

	return data2
}

func saveLog(fileName, s string) {
	// 创建一个文件变量
	file, err := os.OpenFile(fileName, os.O_CREATE|os.O_WRONLY, 0)
	if err != nil {
		fmt.Println("打开文件失败")
		return
	}
	fmt.Fprintf(file, s) // 向file对应文件中写入数据
	file.Close()
}

func regData(str string) {
	compileRegex := regexp.MustCompile(`<li class="rowRegular">(?s:(.*?))</li>`)
	matchArr := compileRegex.FindAllStringSubmatch(str, -1)

	if len(matchArr) == 0 {
		fmt.Println("没搜索到数据")
	}

	outData := ""

	fmt.Println("已搜索到数据，仅输出第一页数据\n")

	for _, match := range matchArr {
		content := match[1]

		// 获取公司名称
		compileRegexCompanyName := regexp.MustCompile(`<span class="resFile1 resultField" style="font-weight:bold;">(.*?)<span style="white-space:nowrap;">(.*?)</span>(.*?)</span>`)
		matchCompany := compileRegexCompanyName.FindStringSubmatch(content)
		cName := ""
		for k, v := range matchCompany {
			if k > 0 {
				cName += v
			}
		}

		// 匹配公司详情页
		compileRegexDetailUrl := regexp.MustCompile("<a href='FilingDetails.aspx(.*?)'>")
		matchDetailUrl := compileRegexDetailUrl.FindStringSubmatch(str)
		detailUrl := fmt.Sprintf("https://wyobiz.wyo.gov/Business/FilingDetails.aspx%s", matchDetailUrl[1])

		msg := fmt.Sprintf("匹配到的公司名称：%s \n匹配到的公司详情页：%s \n\n", cName, detailUrl)
		outData += msg
		fmt.Println(msg)
	}

	//nowTime := time.Now()
	//fileName := fmt.Sprintf("result_%d%d%d_%d%d%d.log", nowTime.Year(), nowTime.Month(), nowTime.Day(), nowTime.Hour(), nowTime.Minute(), nowTime.Second())
	//saveLog(fileName, outData)

	return
}

func Stamp2Str(stamp int64) string {
	timeLayout := "2006-01-02 15:04:05"
	str := time.Unix(stamp, 0).Format(timeLayout)
	return str
}
